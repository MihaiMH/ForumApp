@page "/subforums/{SubForumId:int}/posts/{PostId}"
@using Domain
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IPostService postService;
@inject ICommentService commentService;
@inject NavigationManager navMgr

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (post == null)
{
    <span>Loading..</span>
}
else
{
    <h2>@post.Subforum.Title / @post.Title</h2>

    <div class="post-card">
        <label class="post-card-title">@post.Title</label>
        <NavLink class="nav-link" href="@($"users/{post.Author.Username}")" Match="NavLinkMatch.All">
            <label class="post-card-author">by @post.Author.Username</label>
        </NavLink>
        <label class="post-card-context">@post.Context</label>
    </div>


    <h4>Comments</h4>
    if (comments == null)
    {
        <span>Loading comments...</span>
    }
    else if
        (!comments.Any())
    {
        <span>No comments for this post</span>
    }
    else
    {
        <div class="comments-container">
            @foreach (Comment comment in comments)
            {
                <div class="comment-card">
                    <NavLink class="nav-link" href="@($"users/{comment.User.Username}")" Match="NavLinkMatch.All">
                        <label class="comment-card-author">@comment.User.Username</label>
                    </NavLink>
                    <label class="comment-card-context">@comment.Context</label>
                </div>
            }
        </div>
    }
    <div class="comment-create">
        <p>Write a comment:</p>
        <textarea type="text" @bind="context"></textarea>
        <button @onclick="CreateCommentAsync">Write a comment</button>
    </div>
}



@code {

    [Parameter]
    public int SubForumId { get; set; }

    [Parameter]
    public string? PostId { get; set; }

    private Post? post;
    private IEnumerable<Comment>? comments;
    private string msg = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    private string? context;

    private async Task CreateCommentAsync()
    {
        msg = "";
        try
        {
            Comment comment = await commentService.CreateCommentAsync(name, context, Int32.Parse(PostId));
            if (comment.Id != -1)
            {
                navMgr.NavigateTo($"subforums/{SubForumId}/posts/{PostId}", forceLoad: true);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            post = await postService.GetPostById(PostId);
            comments = await commentService.GetCommentsByPostAsync(post.Id.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return;
        userClaims = user.Claims;
        name = user.Identity!.Name!;
    }

}