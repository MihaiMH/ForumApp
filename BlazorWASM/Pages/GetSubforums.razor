@page "/subforums"
@using Domain
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using BlazorWasm.Services
@using Domain.DTOs
@inject ISubforumService subForumService;
@inject NavigationManager navMgr

<h3 style="text-align: center">Overview of all Subforums</h3>

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (subforums == null)
{
    <span>Loading..</span>
}
else if (!subforums.Any())
{
    <span>No subforums to be found</span>
}
else
{
    <div class="subforum-container">
        @foreach (Subforum subforum in subforums)
        {
            <div class="subforum-card">
                <label class="subforum-card-title">@subforum.Title</label>
                <NavLink class="nav-link" href="@($"users/{subforum.Owner.Username}")" Match="NavLinkMatch.All">
                    <label class="subforum-card-author">by @subforum.Owner.Username</label>
                </NavLink>

                <NavLink class="nav-link" href="@($"subforums/{subforum.Id}/posts")" Match="NavLinkMatch.All">
                    <button>Visit it</button>
                </NavLink>

            </div>
        }
    </div>
}

<AuthorizeView>
    <NotAuthorized>
        <p>Log In in order to create subforums</p>
    </NotAuthorized>
    <Authorized>
        <div class="createSubForumSection">
            <p>Create your own subforum!</p>
            <input type="text" @bind="title"/>
            <div class="button-row">
                <button @onclick="CreateSubForumAsync" disabled="@(string.IsNullOrEmpty(title))" class="createbtn">Create</button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private IEnumerable<Subforum>? subforums;
    private string msg = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    private string? title;

    private async Task CreateSubForumAsync()
    {
        msg = "";
        try
        {
            Subforum subforum = await subForumService.CreateSubForumAsync(title, name);
            if (subforum.Id != -1)
            {
                navMgr.NavigateTo($"subforums/{subforum.Id}/posts");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            subforums = await subForumService.GetSubforumsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        if (!isLoggedIn) return;
        userClaims = user.Claims;
        name = user.Identity!.Name!;
    }

}